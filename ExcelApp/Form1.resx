<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAADkVAAA5FQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOHh4QDh4eEC4uLiCNjY
        2AlycnIRHBwcHQAAACcAAAAzAAAAMwAAADUAAAA1AAAALAAAAB8AAAATAAAACAAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4ODgAODg4AHg4OAm4ODgauHh
        4aDh4eG/4eHhwdTU1M25ubnNoaGhxHV1da46OjqVBAQEggAAAIEAAACAAAAAfAAAAHUAAABnAAAATAAA
        ACcAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4ODgAPz8/AC7u7sc3t7ed+Dg
        4N7h4eH+4eHh/+Hh4f/i4uL/4+Pj/+Tk5P/l5eX/4uLi/tXV1fClpaXJSkpKmgQEBIEAAACBAAAAggAA
        AIMAAACDAAAAfgAAAFsAAAAdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg4ADg4OAA39/fMtvb
        28ff39/+4eHh/+Hh4f/h4eH/4uLi/+Li4v/i4uL/4+Pj/+Pj4//k5OT/5eXl/+bm5v/Z2dnzioqKuQ4O
        DokAAAB/AAAAgQAAAIEAAACBAAAAgwAAAHIAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAADg4OAA4ODgAODg
        4DXg4ODT4ODg/+Hh4f/h4eH/4eHh/+Li4v/i4uL/4uLi/+Pj4//j4+P/5OTk/+Tk5P/k5OT/5eXl/+bm
        5v/h4eH9fn5+4AsLC6YAAACDAAAAgAAAAIEAAACBAAAAggAAAHMAAAAqAAAAAQAAAAAAAAAAAAAAAODg
        4ADg4OAn4ODgzODg4P/g4OD/4eHh/+Hh4f/i4uL/4uLi/+Li4v/j4+P/4+Pj/+Tk5P/k5OT/5OTk/+Xl
        5f/l5eX/5eXl/+fn5//d3d3/b29v+QkJCcsDAwOTAAAAgAAAAIEAAACBAAAAggAAAHgAAAA2AAAAAgAA
        AADg4OAA4ODgDuDg4K3g4OD/4ODg/+Hh4f/h4eH/4uLi/+Li4v/i4uL/4+Pj/+Pj4//k5OT/5OTk/+Tk
        5P/l5eX/5eXl/+Xl5f/m5ub/5ubm/+np6f/T09P/Pz8//wkJCewHBwewAQEBhQAAAIAAAACBAAAAggAA
        AHoAAABF4ODgAODg4ADg4OBg4ODg+ODg4P/h4eH/4eHh/+Li4v/i4uL/4uLi/+Pj4//j4+P/5OTk/+Tk
        5P/k5OT/5eXl/+Xl5f/m5ub/5ubm/+bm5v/n5+f/5+fn/+vr6/+lpaX/FRUV/wwMDPsKCgrWBAQEmQAA
        AIAAAACBAAAAggAAAIPg4OAA4ODgGuDg4M3g4OD/4eHh/+Hh4f/h4eH/4uLi/+Li4v/j4+P/4+Pj/+Tk
        5P/k5OT/5OTl/+Xm5v/m5uf/5ubn/+bo6f/n6Or/5+jp/+bl5f/m5OD/6Ojo/+Dg4f9LS0v/CgoK/w0N
        Df8MDAzvBwcHrwAAAIIAAAB0AAAATODg4ADg4OBt4ODg/uHh4f/h4eH/4eHh/+Li4v/i4uL/4+Pk/+Pl
        5//j5OX/5OTj/+Ti3//k4+H/4trN/93Swf/f1sn/2sGd/9m3hP/Vqmv/0Z1P/9KUOf/Xr3X/6ebi/5SU
        lf8ODg7/DQ0N/w0NDf8NDQ36CQkJkAAAABYAAAAC4ODgD+Dg4MDh4uP/4eLj/+De2//h4eH/4uPk/+Pj
        5P/h2Mz/1bSD/9nMuf/f0b3/1J9Q/93RwP/PoFv/y4AR/9OygP/SnlL/y3oB/8t+C//NgxX/zHsG/8t7
        Bv/fw5n/x8jK/yMjI/8MDAz/DQ0N/w0NDf8NDQ3iDQ0NOQ0NDQDg4OA54ODh69fJtP/Xx7D/1LaJ/9Oj
        XP/by7T/4+Xn/9vIrf/Kewf/2biI/9ayfv/LeAD/2LaE/9e6kP/LeAD/0q11/+DUwf/dxaH/39C5/+HY
        yv/Rmkj/y3YA/9arbf/j5OX/SUlJ/woKCv8NDQ3/DQ0N/w0NDf8NDQ2vDQ0NDOHi5Hjc08X9zIsq/82L
        Kf/ZyK//0JVA/8yFHf/czbj/2Mmz/8l8C//Ysnr/0ZU9/8t3AP/Rkzf/39K//86JI//Qpmf/6Ons/+nr
        7v/n5eL/2cOh/82HH//LewT/3MKc/+zt7/9ubm7/DAwM/w4ODv8NDQ3/DQ0N/w0NDfANDQ1J4eTnqdi6
        j//LegP/1K94/+Li4v/aya//zH8P/9GgWf/ax6z/y38M/9SfUP/Ogxb/zoso/8x+C//cwZv/1q90/9eo
        Y//o6er/4M+2/9SbRv/MfAj/y3oF/9CiXv/n497/7+/v/4+Pj/8TExP/ExMT/xEREf8PDw//Dg4O/w0N
        DZXi5Oiw2LaF/8x7BP/Zw6P/4+Xn/+Lh3//Smkf/zocd/9m+l//MgA//zoQX/86DFv/ZvpX/zoUZ/9Kb
        Sv/e0Lv/38ut/93Ms//Ohx7/y3gB/82KJ//auYn/5+Th/+vs7P/v7+//lpaW/xgYGP8YGBj/FxcX/xUV
        Ff8TExP/ERERz+Lj5tXZvpf/y3oD/9Wxff/j5ef/4+Tm/9KlYf/Mfgr/2LqP/82FGf/MeAD/0JZA/+Pg
        2//Vo1v/yn4P/9zMtP/n5+j/0p9W/8t3AP/Vo1j/5N7U/+vt8P/r7e//6+zt//Dw8P+ZmZn/Hh4e/x4e
        Hv8dHR3/Gxsb/xoaGv8YGBj24uPkzt3Wy//NiST/zYwr/9vQv//g3tz/0ptJ/8x/D//ZwZ7/z4gd/8t5
        AP/WtYX/5+rt/93Jq//LfQr/1aZh/+fk4P/Tlj7/y3gA/9ajVv/fvo7/27mH/9SrcP/XupD/7e3t/4yM
        jP8iIiL/IyMj/yIiIv8hISH/ICAg/x8fH/7i4uKs4uLj/9a0gf/Mewb/y4ck/8yTP//Mewb/zJA4/97P
        uf/PhRv/zYET/+DSvv/o6er/5OLg/86WRf/Nghb/4dXE/9q9kv/Mfw3/y3gA/8p4AP/LewT/y3oB/8+X
        RP/n5uP/aGho/yYmJv8pKSn/KCgo/ycnJ/8nJyf/JiYm4eLi4pXj4+P/4d7a/9i4h//QkDH/zoYc/9Ga
        Sf/azLf/49zS/9SdS//VqGP/5ePg/+jo6P/o6er/3smq/9WoZP/f1cb/6ejn/9/LrP/bu4v/2ryQ/93H
        p//izq//5tjB/93c3P9RUVH/LCws/y4uLv8uLi7/LS0t/y0tLf8sLCyw4uLiWuPj4/jj5OT/5OTm/+Ld
        1v/h2c3/4+Lf/+bm5//m5uX/5uPf/+bl4//o6Oj/6Ojo/+np6f/p6ur/6urr/+rq6//r6+v/6+3u/+zt
        8P/t7vD/7e7w/+3v8P/w8fP/uLi4/zk5Of8zMzP/MzMz/zMzM/8zMzP/MzMz+jMzM2jj4+Mi4+Pj1+Tk
        5P/k5OT/5eXl/+Xm5//m5ub/5ubm/+fn5//n5+f/6Ojo/+jo6P/p6en/6enp/+rq6v/q6ur/6urq/+vr
        6//r6+v/7Ozs/+zs7P/t7e3/7e3t/+vr6/95eXn/NTU1/zg4OP84ODj/OTk5/zk5Of85OTnLODg4HOHh
        4QLj4+OS5OTk/+Tk5P/l5eX/5eXl/+bm5v/m5ub/5+fn/+fn5//o6Oj/6Ojo/+np6f/p6en/6urq/+rq
        6v/r6+v/6+vr/+zs7P/s7Oz/7e3t/+3t7f/w8PD/xsbG/0lJSf88PDz/PT09/z09Pf8+Pj7/Pz8/9D4+
        PlxBQUEA5OTkAOTk5DDk5OTj5eXl/+Xl5f/m5ub/5ubm/+fn5//n5+f/6Ojo/+jo6P/p6en/6enp/+rq
        6v/q6ur/6+vr/+vr6//s7Oz/7Ozs/+3t7f/t7e3/7+/v/+bm5v94eHj/Pj4+/0FBQf9CQkL/Q0ND/0RE
        RPhDQ0N+QUFBBUJCQgDk5OQA29vbAOXl5Xnl5eX85eXl/+bm5v/m5ub/5+fn/+jo6P/o6Oj/6enp/+np
        6f/q6ur/6urq/+vr6//r6+v/7Ozs/+zs7P/t7e3/7e3t/+7u7v/t7e3/m5ub/0dHR/9FRUX/RkZG/0dH
        R/9ISEjxSEhIgkdHRwpHR0cAAAAAAAAAAADl5eUA5eXlEuXl5a7m5ub/5ubm/+fn5//n5+f/6Ojo/+jo
        6P/p6en/6enp/+rq6v/q6ur/6+vr/+vr6//s7Oz/7e3t/+3t7f/u7u7/7e3t/6ampv9PT0//SEhI/0pK
        Sv9LS0v8S0tLyEtLS1FLS0sES0tLAAAAAAAAAAAAAAAAAAAAAADm5uYA5ubmHebm5rzn5+f/5+fn/+jo
        6P/o6Oj/6enp/+np6f/q6ur/6urq/+vr6//r6+v/7Ozs/+zs7P/t7e3/7+/v/+rq6v+lpaX/UlJS/0tL
        S/pNTU3fTk5Or05OTmJPT08XTk5OAFBQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAObm5gDn5+cA5ubmI+fn
        56rn5+f56Ojo/+np6f/p6en/6urq/+rq6v/r6+v/6+vr/+zs7P/s7Oz/7e3t/+3t7f/W1tb+kZGR8lNT
        U81NTU2VT09PUFBQUCBSUlIFUVFRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADn5+cA5+fnDejo6Gro6OjV6enp+enp6f/q6ur/6urq/+vr6//s7Oz/7Ozs/+3t7fzn5+fmxcXFs4KC
        gnZJSUk7SkpKElVVVQJRUVEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADo6OgA5eXlAOnp6Rzp6elI6urqgerq6rjr6+vh6+vr1Ozs7Lbs7OyT7e3tXd3d
        3SlaWloHn5+fAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADr6+sA6+vrCuvr6x7r6+sV7OzsBuzs
        7ADs7OwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////AAH/+AAAf/AAAB/gAAAfwAAAB4AAAAMAAAADAAAAAgAAAAIAA
        AAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAABgAAAA8AA
        AAfgAAAf8AAAf/gAA//8AD///8H///////8=
</value>
  </data>
</root>